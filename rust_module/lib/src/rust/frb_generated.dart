// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/cfbcrypto.dart';
import 'api/html_parser/exam_schedule.dart';
import 'api/html_parser/program_completion_info.dart';
import 'api/rscrypto.dart';
import 'api/utils/section_finder.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiRscryptoInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.9.0';

  @override
  int get rustContentHash => 2074314718;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_module',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Uint8List crateApiCfbcryptoAesCfbDecrypt(
      {required AesCfb that, required List<int> data});

  Uint8List crateApiCfbcryptoAesCfbEncrypt(
      {required AesCfb that, required List<int> data});

  AesCfb crateApiCfbcryptoAesCfbNew(
      {required List<int> key, required List<int> iv});

  String crateApiRscryptoDecryptAes128Cbc64Prefix(
      {required String encryptedBase64, required List<int> key});

  String crateApiRscryptoEncryptAes128Cbc64Prefix(
      {required String plain, required List<int> key});

  int? crateApiUtilsSectionFinderFindClosestSectionFromRfc3339(
      {required String startTimeStr, required String endTimeStr});

  String crateApiRscryptoGetDecryptWebVpnHost(
      {required String ciphertext,
      required List<int> key,
      required List<int> iv});

  String crateApiRscryptoGetEncryptWebVpnHost(
      {required String plaintext,
      required List<int> key,
      required List<int> iv});

  String crateApiRscryptoGetWebVpnOrdinaryUrl(
      {required String url, required List<int> key, required List<int> iv});

  String crateApiRscryptoGetWebVpnUrl(
      {required String url,
      required List<int> key,
      required List<int> iv,
      required String vpnBaseUrl});

  Future<void> crateApiRscryptoInitApp();

  Future<Uint8List?> crateApiHtmlParserExamScheduleParseExamSchedules(
      {required List<int> html});

  Future<Uint8List?> crateApiHtmlParserProgramCompletionInfoParseGraduateInfo(
      {required List<int> html});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Uint8List crateApiCfbcryptoAesCfbDecrypt(
      {required AesCfb that, required List<int> data}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_aes_cfb(that, serializer);
        sse_encode_list_prim_u_8_loose(data, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCfbcryptoAesCfbDecryptConstMeta,
      argValues: [that, data],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCfbcryptoAesCfbDecryptConstMeta =>
      const TaskConstMeta(
        debugName: "aes_cfb_decrypt",
        argNames: ["that", "data"],
      );

  @override
  Uint8List crateApiCfbcryptoAesCfbEncrypt(
      {required AesCfb that, required List<int> data}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_aes_cfb(that, serializer);
        sse_encode_list_prim_u_8_loose(data, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCfbcryptoAesCfbEncryptConstMeta,
      argValues: [that, data],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCfbcryptoAesCfbEncryptConstMeta =>
      const TaskConstMeta(
        debugName: "aes_cfb_encrypt",
        argNames: ["that", "data"],
      );

  @override
  AesCfb crateApiCfbcryptoAesCfbNew(
      {required List<int> key, required List<int> iv}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(key, serializer);
        sse_encode_list_prim_u_8_loose(iv, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_aes_cfb,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCfbcryptoAesCfbNewConstMeta,
      argValues: [key, iv],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCfbcryptoAesCfbNewConstMeta => const TaskConstMeta(
        debugName: "aes_cfb_new",
        argNames: ["key", "iv"],
      );

  @override
  String crateApiRscryptoDecryptAes128Cbc64Prefix(
      {required String encryptedBase64, required List<int> key}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(encryptedBase64, serializer);
        sse_encode_list_prim_u_8_loose(key, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRscryptoDecryptAes128Cbc64PrefixConstMeta,
      argValues: [encryptedBase64, key],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRscryptoDecryptAes128Cbc64PrefixConstMeta =>
      const TaskConstMeta(
        debugName: "decrypt_aes_128_cbc_64prefix",
        argNames: ["encryptedBase64", "key"],
      );

  @override
  String crateApiRscryptoEncryptAes128Cbc64Prefix(
      {required String plain, required List<int> key}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(plain, serializer);
        sse_encode_list_prim_u_8_loose(key, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRscryptoEncryptAes128Cbc64PrefixConstMeta,
      argValues: [plain, key],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRscryptoEncryptAes128Cbc64PrefixConstMeta =>
      const TaskConstMeta(
        debugName: "encrypt_aes_128_cbc_64prefix",
        argNames: ["plain", "key"],
      );

  @override
  int? crateApiUtilsSectionFinderFindClosestSectionFromRfc3339(
      {required String startTimeStr, required String endTimeStr}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(startTimeStr, serializer);
        sse_encode_String(endTimeStr, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiUtilsSectionFinderFindClosestSectionFromRfc3339ConstMeta,
      argValues: [startTimeStr, endTimeStr],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiUtilsSectionFinderFindClosestSectionFromRfc3339ConstMeta =>
          const TaskConstMeta(
            debugName: "find_closest_section_from_rfc3339",
            argNames: ["startTimeStr", "endTimeStr"],
          );

  @override
  String crateApiRscryptoGetDecryptWebVpnHost(
      {required String ciphertext,
      required List<int> key,
      required List<int> iv}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(ciphertext, serializer);
        sse_encode_list_prim_u_8_loose(key, serializer);
        sse_encode_list_prim_u_8_loose(iv, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRscryptoGetDecryptWebVpnHostConstMeta,
      argValues: [ciphertext, key, iv],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRscryptoGetDecryptWebVpnHostConstMeta =>
      const TaskConstMeta(
        debugName: "get_decrypt_web_vpn_host",
        argNames: ["ciphertext", "key", "iv"],
      );

  @override
  String crateApiRscryptoGetEncryptWebVpnHost(
      {required String plaintext,
      required List<int> key,
      required List<int> iv}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(plaintext, serializer);
        sse_encode_list_prim_u_8_loose(key, serializer);
        sse_encode_list_prim_u_8_loose(iv, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRscryptoGetEncryptWebVpnHostConstMeta,
      argValues: [plaintext, key, iv],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRscryptoGetEncryptWebVpnHostConstMeta =>
      const TaskConstMeta(
        debugName: "get_encrypt_web_vpn_host",
        argNames: ["plaintext", "key", "iv"],
      );

  @override
  String crateApiRscryptoGetWebVpnOrdinaryUrl(
      {required String url, required List<int> key, required List<int> iv}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(url, serializer);
        sse_encode_list_prim_u_8_loose(key, serializer);
        sse_encode_list_prim_u_8_loose(iv, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRscryptoGetWebVpnOrdinaryUrlConstMeta,
      argValues: [url, key, iv],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRscryptoGetWebVpnOrdinaryUrlConstMeta =>
      const TaskConstMeta(
        debugName: "get_web_vpn_ordinary_url",
        argNames: ["url", "key", "iv"],
      );

  @override
  String crateApiRscryptoGetWebVpnUrl(
      {required String url,
      required List<int> key,
      required List<int> iv,
      required String vpnBaseUrl}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(url, serializer);
        sse_encode_list_prim_u_8_loose(key, serializer);
        sse_encode_list_prim_u_8_loose(iv, serializer);
        sse_encode_String(vpnBaseUrl, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRscryptoGetWebVpnUrlConstMeta,
      argValues: [url, key, iv, vpnBaseUrl],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRscryptoGetWebVpnUrlConstMeta =>
      const TaskConstMeta(
        debugName: "get_web_vpn_url",
        argNames: ["url", "key", "iv", "vpnBaseUrl"],
      );

  @override
  Future<void> crateApiRscryptoInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRscryptoInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRscryptoInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Future<Uint8List?> crateApiHtmlParserExamScheduleParseExamSchedules(
      {required List<int> html}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(html, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiHtmlParserExamScheduleParseExamSchedulesConstMeta,
      argValues: [html],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiHtmlParserExamScheduleParseExamSchedulesConstMeta =>
          const TaskConstMeta(
            debugName: "parse_exam_schedules",
            argNames: ["html"],
          );

  @override
  Future<Uint8List?> crateApiHtmlParserProgramCompletionInfoParseGraduateInfo(
      {required List<int> html}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(html, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiHtmlParserProgramCompletionInfoParseGraduateInfoConstMeta,
      argValues: [html],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiHtmlParserProgramCompletionInfoParseGraduateInfoConstMeta =>
          const TaskConstMeta(
            debugName: "parse_graduate_info",
            argNames: ["html"],
          );

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  AesCfb dco_decode_aes_cfb(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return AesCfb.raw(
      key: dco_decode_u_8_array_16(arr[0]),
      iv: dco_decode_u_8_array_16(arr[1]),
    );
  }

  @protected
  AesCfb dco_decode_box_autoadd_aes_cfb(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_aes_cfb(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_32(raw);
  }

  @protected
  Uint8List? dco_decode_opt_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_prim_u_8_strict(raw);
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  U8Array16 dco_decode_u_8_array_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return U8Array16(dco_decode_list_prim_u_8_strict(raw));
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  AesCfb sse_decode_aes_cfb(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_key = sse_decode_u_8_array_16(deserializer);
    var var_iv = sse_decode_u_8_array_16(deserializer);
    return AesCfb.raw(key: var_key, iv: var_iv);
  }

  @protected
  AesCfb sse_decode_box_autoadd_aes_cfb(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_aes_cfb(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_32(deserializer));
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Uint8List? sse_decode_opt_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_u_8_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  U8Array16 sse_decode_u_8_array_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return U8Array16(inner);
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_aes_cfb(AesCfb self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8_array_16(self.key, serializer);
    sse_encode_u_8_array_16(self.iv, serializer);
  }

  @protected
  void sse_encode_box_autoadd_aes_cfb(AesCfb self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_aes_cfb(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self, serializer);
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_u_8_strict(
      Uint8List? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_u_8_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_u_8_array_16(U8Array16 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.inner, serializer);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }
}
